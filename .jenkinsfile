pipeline {
  agent { label 'docker' }
  options {
    timeout(time: 1, unit: 'HOURS')
    parallelsAlwaysFailFast()
  }
  stages {
    stage('Clean') { steps { sh 'make clean && git submodule update --init --recursive' } }
    stage('Venv') { steps { sh 'make venv && make ckine/ckine.so' } }
    stage('Download') {
      steps {
        withCredentials([string(credentialsId: 'SYNAPSE_APIKEY', variable: 'SYNAPSE_APIKEY')]) {
          sh 'make download'
        }
      }
    }
    stage('Run') {
      parallel {
        stage('Test') {
          steps {
            sh 'make testcover'
            sh 'make spell'
            junit allowEmptyResults: false, testResults: 'junit.xml'
            cobertura coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
          }
        }
        stage('Build') {
          steps {
            sh 'make -j 4'
            archiveArtifacts artifacts: 'output/*.pdf, output/*.svg', onlyIfSuccessful: true
            recordIssues qualityGates: [[threshold: 1, type: 'TOTAL_HIGH', unstable: true], [threshold: 1, type: 'TOTAL_NORMAL', unstable: true], [threshold: 15, type: 'TOTAL_LOW', unstable: true]], tools: [pyLint(pattern: 'pylint.log')]
          }
        }
      }
    }
  }
  post {
    always {
      cleanWs cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
    }
  }
}
